name: Azure Deployment Pipeline

on: 
  push:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure (use only for initial setup or infrastructure changes)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug Docker image name
        run: |
          echo "Docker image will be: $DOCKER_IMAGE"
          echo "Docker username: ${{ secrets.DOCKER_USERNAME }}"
          echo "GitHub SHA: ${{ github.sha }}"
          
      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE ./app
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push Docker image
        run: docker push $DOCKER_IMAGE

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Only run if [infra] is in commit message OR manually requested with infrastructure=true
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'true') || 
      (github.event_name == 'push' && contains(github.event.head_commit.message, '[infra]'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      - name: Azure Login with Retry
        run: |
          for i in {1..3}; do
            echo "Login attempt $i"
            if az login -u ${{ secrets.AZURE_USERNAME }} -p ${{ secrets.AZURE_PASSWORD }}; then
              echo "Login successful"
              break
            else
              echo "Login failed, retrying..."
              sleep 10
            fi
          done
          
          # Set subscription
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
          # Verify
          echo "Current account:"
          az account show

      - name: Write SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PUBLIC_KEY }}" > ~/.ssh/azure-container-key.pub
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/azure-container-key
          chmod 600 ~/.ssh/azure-container-key*
          
      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd ./terraform
          terraform plan
        env:
          ARM_USE_CLI: true
          
      - name: Terraform Apply
        run: |
          cd ./terraform
          terraform apply -auto-approve
        env:
          ARM_USE_CLI: true
          
      - name: Get Public IP
        run: |
          cd ./terraform
          IP=$(terraform output -raw public_ip)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV
          echo "Deployed to IP: $IP"
          
      - name: Setup Ansible
        run: sudo apt update && sudo apt install -y ansible
        
      - name: Run Ansible Playbook
        run: |
          ansible-playbook \
            -i "${PUBLIC_IP}," \
            -u azureuser \
            --private-key ~/.ssh/azure-container-key \
            -e "docker_image=${DOCKER_IMAGE}" \
            ansible/docker.yml
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
          ANSIBLE_HOST_KEY_CHECKING: "False"

  # New job for app-only deployment
  deploy-app-only:
    needs: build
    runs-on: ubuntu-latest
    # Only run if [infra] is NOT in commit message AND not manually triggered with infrastructure
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'false') || 
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[infra]'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      - name: Azure Login
        run: |
          az login -u ${{ secrets.AZURE_USERNAME }} -p ${{ secrets.AZURE_PASSWORD }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Write SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PUBLIC_KEY }}" > ~/.ssh/azure-container-key.pub
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/azure-container-key
          chmod 600 ~/.ssh/azure-container-key*
          
      - name: Get Public IP from existing resources
        run: |
          # Option 1: Use stored IP from secrets (most reliable)
          if [ -n "${{ secrets.AZURE_VM_PUBLIC_IP }}" ]; then
            PUBLIC_IP="${{ secrets.AZURE_VM_PUBLIC_IP }}"
            echo "Using stored IP from secrets: $PUBLIC_IP"
          else
            # Option 2: Try to get from Azure resources
            echo "Getting IP from Azure resources..."
            PUBLIC_IP=$(az network public-ip list --query "[0].ipAddress" -o tsv)
            
            if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
              echo "Failed to get IP from public-ip list, trying VM method..."
              PUBLIC_IP=$(az vm list-ip-addresses --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)
            fi
          fi
          
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "ERROR: Could not retrieve public IP address"
            echo "Please either:"
            echo "1. Add AZURE_VM_PUBLIC_IP secret with your VM's IP address"
            echo "2. Update the Azure CLI commands with correct resource names"
            exit 1
          fi
          
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Deploying to IP: $PUBLIC_IP"
          
      - name: Setup Ansible
        run: sudo apt update && sudo apt install -y ansible
        
      - name: Run Ansible Playbook
        run: |
          ansible-playbook \
            -i "${PUBLIC_IP}," \
            -u azureuser \
            --private-key ~/.ssh/azure-container-key \
            -e "docker_image=${DOCKER_IMAGE}" \
            ansible/docker.yml
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
          ANSIBLE_HOST_KEY_CHECKING: "False"